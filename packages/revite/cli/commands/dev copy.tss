import glob from "glob"
import { join } from "path"
import { existsSync } from "fs"
import { Revite } from "@revite/core"
import { getReviteConfig } from "@revite/config"
import WebSocket from "../ws.js"
import createWatcher from "../watch.js" 
import { InternalConfig, BuildResult } from "@revite/types"
import { runOptimize, Builder } from "@revite/build"

export default async () =>{
  
  const config: InternalConfig = await getReviteConfig({});
  const revite = new Revite(config);
  const log = revite.log;

  // 检查工作，
  // 比如react>= 17.0，react-router >= 6.0， type=module
  // await fs.writeFile(config.packageJson, '{"type": "module"}')

  console.log("revite ready....");
  await revite.ready();

  console.log("start build....");
  const inputs = [
    'react', 
    'react-dom',
    'react-dom/server',
    "history",
    "react-router-dom",
    "react-router-dom/server",
    "@revite/components",
    "styled-components",
    "@material-ui/core",
    "@material-ui/core/styles"
  ]
  await runOptimize(inputs,config);

  await revite.serve.listen();
  return;

  // 业务代码
  const buildFiles = glob.sync(
    `${config.appSrc}/**/*`,
    { 
      nodir:true,
      absolute: false,
      cache: { path: "FILE" }
    },
  );
  const hookFiles = glob.sync(
    `${config.hooksDir}/**/*`,
    { 
      nodir:true,
      absolute: false,
      cache: { path: "FILE" }
    },
  );

  buildFiles.push(config.htmlPath);

  const watcher = createWatcher(revite);

  const builder = await new Builder(revite).ready();

  // hmr-ws
  const ws = new WebSocket(revite);

  // 应用初始构建
  const buildResult: BuildResult[] = await builder.build(buildFiles);

  // 注册hooks
  if(hookFiles.length>0){
    const buildResult: BuildResult[] = await builder.build(hookFiles,{ outputDir: config.build.outputDir });
    const hooksPath = join(config.build.outputDir,"/hooks/index"+config.build.outputExt);
    if(existsSync(hooksPath)){    
      const { default: addHook } = await import(hooksPath);
      await addHook(revite);
    }
  }
  
  // 通知客户端
  revite.hook("notification:hmr", async (options:any) =>{
    ws.send(options);
  })

  // 打包裸模块
  revite.hook("build:module", async (options:any)=>{
    await runOptimize(options,config);
  })

  // 打包业务代码
  revite.hook("build:general", async ({ file, fileLoc, type }:any) =>{
    const options:any = {};
    if(file.includes("hooks/")){
      options.outputDir = config.build.serverDir;
    }
    const buildResult: BuildResult[] = await builder.build([file],options);
    const { accessPath } = buildResult[0];
    if(type==="add"){
      log.info(`add new file ${fileLoc}`,{ markText: "hmr:add" });
    }else{
      log.info(`${fileLoc} has updated to ${accessPath}`,{ markText: "hmr:update" });
    }    
    if(fileLoc.endsWith("routes.js")){
      ws.send({ type: "reload" });
      return ;
    }
    ws.send({ bubbled: false, type: "update", url: accessPath });
  })

  // build:routes
  // await buildRoutes();

  console.log("ready....");
  await revite.ready()

  return revite;
}
